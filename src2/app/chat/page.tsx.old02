'use client';

import { useState } from 'react';

interface Message {
  role: 'user' | 'assistant';
  content: string;
}

interface Artifact {
  title: string;
  content: string;
}

export default function ChatPage() {
  const [messages, setMessages] = useState<Message[]>([
    {
      role: 'assistant',
      content: "I'm Noah. I can tell you don't accept things at face value - that's smart. What would it take for something to earn your attention? Maybe start with: what's one small thing that frustrated you today?"
    }
  ]);
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [artifact, setArtifact] = useState<Artifact | null>(null);
  const [showReasoning, setShowReasoning] = useState(false);
  const [reasoning, setReasoning] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    const userMessage = input.trim();
    setInput('');
    setIsLoading(true);

    // Add user message
    const newMessages = [...messages, { role: 'user' as const, content: userMessage }];
    setMessages(newMessages);

    try {
      // Call our API route
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ messages: newMessages }),
      });

      if (!response.ok) {
        throw new Error('Failed to get response');
      }

      const data = await response.json();
      
      // Add Noah's response
      setMessages(prev => [...prev, { role: 'assistant', content: data.content }]);

      // Check if we should generate an artifact
      if (userMessage.length > 20 && (
        userMessage.toLowerCase().includes('frustrat') ||
        userMessage.toLowerCase().includes('annoying') ||
        userMessage.toLowerCase().includes('problem') ||
        userMessage.toLowerCase().includes('difficult')
      )) {
        await generateArtifact(userMessage, data.content);
      }

    } catch (error) {
      console.error('Error:', error);
      setMessages(prev => [...prev, { 
        role: 'assistant', 
        content: 'Something went wrong on my end. Want to try that again? I learn from failures.' 
      }]);
    }

    setIsLoading(false);
  };

  const generateArtifact = async (userInput: string, response: string) => {
    try {
      const artifactResponse = await fetch('/api/artifact', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ userInput, response }),
      });

      if (!artifactResponse.ok) {
        throw new Error('Failed to generate artifact');
      }

      const data = await artifactResponse.json();
      // Parse the response
      const lines = data.content.split('\n');
      const titleLine = lines.find(line => line.startsWith('TITLE:'));
      const toolStart = lines.findIndex(line => line.startsWith('TOOL:'));
      const reasoningStart = lines.findIndex(line => line.startsWith('REASONING:'));

      if (titleLine && toolStart !== -1) {
        const title = titleLine.replace('TITLE:', '').trim();
        const toolContent = lines.slice(toolStart + 1, reasoningStart !== -1 ? reasoningStart : undefined).join('\n').trim();
        const reasoningContent = reasoningStart !== -1 ? lines.slice(reasoningStart + 1).join('\n').trim() : '';

        setArtifact({ title, content: toolContent });
        setReasoning(reasoningContent);
      }
    } catch (error) {
      console.error('Error generating artifact:', error);
    }
  };

  const downloadArtifact = () => {
    if (!artifact) return;
    
    const content = `${artifact.title}\n\n${artifact.content}`;
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${artifact.title.toLowerCase().replace(/\s+/g, '-')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="min-h-screen bg-gray-900 text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-3xl font-bold mb-2">TryIt-AI Kit (Refact)</h1>
          <p className="text-gray-400">Co-creating solutions with your discernment</p>
        </div>

        <div className="grid lg:grid-cols-3 gap-6 max-w-6xl mx-auto">
          {/* Chat Area */}
          <div className="lg:col-span-2">
            <div className="bg-gray-800 rounded-lg border border-gray-700 h-96 overflow-y-auto p-4 mb-4">
              {messages.map((message, index) => (
                <div key={index} className={`mb-4 ${message.role === 'user' ? 'text-right' : 'text-left'}`}>
                  <div className={`inline-block max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${
                    message.role === 'user' 
                      ? 'bg-blue-600 text-white' 
                      : 'bg-gray-700 text-gray-100'
                  }`}>
                    <p className="text-sm whitespace-pre-wrap">{message.content}</p>
                  </div>
                </div>
              ))}
              {isLoading && (
                <div className="text-left mb-4">
                  <div className="inline-block bg-gray-700 text-gray-100 px-4 py-2 rounded-lg">
                    <p className="text-sm">Noah is thinking...</p>
                  </div>
                </div>
              )}
            </div>

            {/* Input Form */}
            <form onSubmit={handleSubmit} className="flex gap-2">
              <input
                type="text"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Share what's on your mind..."
                className="flex-1 px-4 py-2 bg-gray-800 border border-gray-700 rounded-lg focus:outline-none focus:border-blue-500"
                disabled={isLoading}
              />
              <button
                type="submit"
                disabled={isLoading || !input.trim()}
                className="px-6 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded-lg font-medium transition-colors"
              >
                Send
              </button>
            </form>
          </div>

          {/* Artifact & Reasoning Panel */}
          <div className="space-y-4">
            {artifact && (
              <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
                <div className="flex items-center justify-between mb-3">
                  <h3 className="font-semibold text-green-400">Micro-Tool Created</h3>
                  <button
                    onClick={downloadArtifact}
                    className="text-sm bg-green-600 hover:bg-green-700 px-3 py-1 rounded transition-colors"
                  >
                    Download
                  </button>
                </div>
                <h4 className="font-medium mb-2">{artifact.title}</h4>
                <div className="bg-gray-900 p-3 rounded text-sm whitespace-pre-wrap font-mono">
                  {artifact.content}
                </div>
              </div>
            )}

            {reasoning && (
              <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
                <button
                  onClick={() => setShowReasoning(!showReasoning)}
                  className="flex items-center justify-between w-full text-left"
                >
                  <h3 className="font-semibold text-blue-400">How I Designed This</h3>
                  <span className="text-gray-400">{showReasoning ? '−' : '+'}</span>
                </button>
                {showReasoning && (
                  <div className="mt-3 text-sm text-gray-300 whitespace-pre-wrap">
                    {reasoning}
                  </div>
                )}
              </div>
            )}

            {/* Trust Indicators */}
            <div className="bg-gray-800 rounded-lg border border-gray-700 p-4">
              <h3 className="font-semibold mb-3 text-gray-300">Why This Is Different</h3>
              <div className="space-y-2 text-sm text-gray-400">
                <div className="flex items-center gap-2">
                  <span className="text-green-400">✓</span>
                  <span>Shows reasoning behind suggestions</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-green-400">✓</span>
                  <span>Admits uncertainty and limitations</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-green-400">✓</span>
                  <span>Treats you as co-architect, not user</span>
                </div>
                <div className="flex items-center gap-2">
                  <span className="text-green-400">✓</span>
                  <span>Gets better when challenged</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
